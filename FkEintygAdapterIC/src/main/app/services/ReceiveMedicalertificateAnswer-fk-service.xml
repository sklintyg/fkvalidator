<?xml version="1.0" encoding="utf-8"?>
<mule 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:jdbc="http://www.mulesoft.org/schema/mule/jdbc"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:mule-xml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:smooks="http://www.muleforge.org/smooks/schema/mule-module-smooks"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:rest="http://www.mulesoft.org/schema/mule/rest"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.mulesoft.org/schema/mule/core      http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/vm        http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
		http://www.mulesoft.org/schema/mule/jdbc      http://www.mulesoft.org/schema/mule/jdbc/current/mule-jdbc.xsd
		http://www.mulesoft.org/schema/mule/cxf       http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
		http://www.mulesoft.org/schema/mule/jms       http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
		http://www.mulesoft.org/schema/mule/http      http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
		http://www.mulesoft.org/schema/mule/https     http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
		http://www.mulesoft.org/schema/mule/xml       http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
		http://www.muleforge.org/smooks/schema/mule-module-smooks http://dist.muleforge.org/smooks/schema/mule-module-smooks/1.3/mule-module-smooks.xsd
		http://www.mulesoft.org/schema/mule/json      http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
		http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
		http://www.mulesoft.org/schema/mule/rest      http://www.mulesoft.org/schema/mule/rest/current/mule-rest.xsd
		http://www.mulesoft.org/schema/mule/xml       http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
	">
	
	<!--
	Name of this file is mandatory and may not be changed. 
	 -->
	 	
	<message-properties-transformer name="changeNamespaceRecMedCertAnswer">
		<add-message-property key="namespace" value="urn:riv:insuranceprocess:healthreporting:ReceiveMedicalCertificateAnswer:1:rivtabp20"/>
	</message-properties-transformer>           
	
	<message-properties-transformer name="newReceiverIdAnswer">
		<delete-message-property key="receiverid"/>
	</message-properties-transformer>           

	<message-properties-transformer name="deleteSoapActionAnswer">
		<delete-message-property key="soapaction"/>
	</message-properties-transformer>           
	
	<flow name="fk-varden-taemotsvar-service">
	
		<composite-source>
			<https:inbound-endpoint address="${inbound.endpoint.https.eintyg.receivemedicalcertificateanswer}"
				connector-ref="soitoolkit-https-connector" 
				exchange-pattern="request-response"
				responseTransformer-refs="objToStr logRespOut"
				transformer-refs="objToStr logReqIn checkSenderHsaIdTransformer newReceiverIdAnswer changeNamespaceRecMedCertAnswer">
			</https:inbound-endpoint>
			
			<http:inbound-endpoint address="${inbound.endpoint.http.eintyg.receivemedicalcertificateanswer}"
				exchange-pattern="request-response"
				responseTransformer-refs="objToStr logRespOut"
				transformer-refs="objToStr logReqIn newReceiverIdAnswer changeNamespaceRecMedCertAnswer">
			</http:inbound-endpoint>
		</composite-source>

		<cxf:proxy-service
			namespace="urn:riv:fk:vardgivare:sjukvard:TaEmotSvar:1:rivtabp20"
			payload="body" 
			service="TaEmotSvarResponderService"
			wsdlLocation="classpath:/schemas/fk/TaEmotSvarInteraction12_1.0_rivtabp20.wsdl" />
			
		<custom-transformer doc:name="transform-request" class="se.skl.skltpservices.adapter.fk.recmedcertanswer.FkRequest2VardTransformer"/>
		
		<!-- 
 			Propagate x-vp-sender-id as an outbound property, value is the hsa id of FK adapter to be used when invoking VP.
 			Propagate x-vp-instance-id as an outbound property, value is set as an id of the invoked VP.
 			
 			These two headers are dependent on each other in a way that when using x-vp-sender-id against VP, VP will check for a valid x-vp-instance-id.
 		-->
 		<set-property propertyName="x-vp-sender-id" value="${FKADAPTER_HSA_ID}" doc:name="propagate x-vp-sender-id when invoking VP" />
 		<set-property propertyName="x-vp-instance-id" value="${VP_INSTANCE_ID}" doc:name="propagate x-vp-instance-id when invoking VP" />
			
		<http:outbound-endpoint connector-ref="soitoolkit-http-connector"
			address="${outbound.endpoint.eintyg.receivemedicalcertificateanswer}"
			exchange-pattern="request-response" 
			responseTimeout="${SERVICE_TIMEOUT_MS}"
			transformer-refs="deleteSoapActionAnswer objToStr logReqOut" 
			responseTransformer-refs="logRespIn">
			<cxf:jaxws-client port="ReceiveMedicalCertificateAnswerResponderPort"
				operation="ReceiveMedicalCertificateAnswer"
				clientClass="se.skl.riv.insuranceprocess.healthreporting.receivemedicalcertificateanswer.v1.rivtabp20.ReceiveMedicalCertificateAnswerResponderService"
				wsdlLocation="classpath:/schemas/vard/interactions/ReceiveMedicalCertificateAnswerInteraction/ReceiveMedicalCertificateAnswerInteraction_1.0_rivtabp20.wsdl" />
		</http:outbound-endpoint>
		
		 <response>
            <custom-transformer doc:name="transform-response" class="se.skl.skltpservices.adapter.fk.recmedcertanswer.VardResponse2FkTransformer"/>
        </response>
        
        <catch-exception-strategy>
        	<custom-transformer class="se.skl.skltpservices.adapter.common.processor.ExceptionMessageTransformer"/>     	
        </catch-exception-strategy>

	</flow>
</mule>