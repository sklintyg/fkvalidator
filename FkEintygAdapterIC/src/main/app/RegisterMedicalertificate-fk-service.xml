<?xml version="1.0" encoding="utf-8"?>
<mule 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:jdbc="http://www.mulesoft.org/schema/mule/jdbc"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:mule-xml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:smooks="http://www.muleforge.org/smooks/schema/mule-module-smooks"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:rest="http://www.mulesoft.org/schema/mule/rest"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.mulesoft.org/schema/mule/core      http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/vm        http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
		http://www.mulesoft.org/schema/mule/jdbc      http://www.mulesoft.org/schema/mule/jdbc/current/mule-jdbc.xsd
		http://www.mulesoft.org/schema/mule/cxf       http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
		http://www.mulesoft.org/schema/mule/jms       http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
		http://www.mulesoft.org/schema/mule/http      http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
		http://www.mulesoft.org/schema/mule/https     http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
		http://www.mulesoft.org/schema/mule/xml       http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
		http://www.muleforge.org/smooks/schema/mule-module-smooks http://dist.muleforge.org/smooks/schema/mule-module-smooks/1.3/mule-module-smooks.xsd
		http://www.mulesoft.org/schema/mule/json      http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
		http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
		http://www.mulesoft.org/schema/mule/rest      http://www.mulesoft.org/schema/mule/rest/current/mule-rest.xsd
		http://www.mulesoft.org/schema/mule/xml       http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
	">
	<!--
	Name of this file is mandatory and may not be changed. 
	 -->
	
	<message-properties-transformer name="changeNamespaceRegisterCertificate">
		<add-message-property key="namespace" value="urn:riv:fk:vardgivare:sjukvard:TaEmotLakarintyg:1:rivtabp20"/>
	</message-properties-transformer>           
	
	
	<flow name="varden-fk-registermedicalcertificate-service">

		<https:inbound-endpoint address="${inbound.endpoint.eintyg.registermedicalcertificate}"
			connector-ref="soitoolkit-https-connector" 
			exchange-pattern="request-response"
			responseTransformer-refs="logRespOut"
			transformer-refs="logReqIn changeNamespaceRegisterCertificate">
		</https:inbound-endpoint>

		<cxf:proxy-service
			namespace="urn:riv:insuranceprocess:healthreporting:RegisterMedicalCertificate:3:rivtabp20"
			payload="body" 
			service="RegisterMedicalCertificateResponderService"
			wsdlLocation="classpath:/schemas/vard/interactions/RegisterMedicalCertificateInteraction/RegisterMedicalCertificateInteraction_3.0_rivtabp20.wsdl" />
			
		<custom-transformer doc:name="transform-request" class="se.skl.skltpservices.adapter.fk.regmedcert.Vard2FkTransformer"/>
			
		<https:outbound-endpoint connector-ref="soitoolkit-https-connector"
			address="${outbound.endpoint.eintyg.registermedicalcertificate}"
			exchange-pattern="request-response" 
			responseTimeout="${SERVICE_TIMEOUT_MS}"
			transformer-refs="logReqOut" 
			responseTransformer-refs="logRespIn">
			<cxf:jaxws-client port="TaEmotLakarintygResponderPort"
				operation="TaEmotLakarintyg"
				clientClass="se.fk.vardgivare.sjukvard.taemotlakarintyg.v1.rivtabp20.TaEmotLakarintygResponderService"
				wsdlLocation="classpath:/schemas/fk/TaEmotLakarintygInteraction_1.0_rivtabp20.wsdl" />
		</https:outbound-endpoint>
		
		 <response>
            <custom-transformer doc:name="transform-response" class="se.skl.skltpservices.adapter.fk.regmedcert.Fk2VardTransformer"/>
        </response>

	</flow>
	
	<flow name="varden-fk-registermedicalcertificate-service-test">

		<https:inbound-endpoint address="${inbound.endpoint.eintyg.registermedicalcertificate.test}"
			connector-ref="soitoolkit-https-connector" 
			exchange-pattern="request-response"
			responseTransformer-refs="logRespOut"
			transformer-refs="logReqIn changeNamespaceRegisterCertificate">
		</https:inbound-endpoint>

		<cxf:proxy-service
			namespace="urn:riv:insuranceprocess:healthreporting:RegisterMedicalCertificate:3:rivtabp20"
			payload="body" 
			service="RegisterMedicalCertificateResponderService"
			wsdlLocation="classpath:/schemas/vard/interactions/RegisterMedicalCertificateInteraction/RegisterMedicalCertificateInteraction_3.0_rivtabp20.wsdl" />
			
		<custom-transformer doc:name="transform-request" class="se.skl.skltpservices.adapter.fk.regmedcert.Vard2FkTransformer"/>
			
		<https:outbound-endpoint connector-ref="soitoolkit-https-connector"
			address="${outbound.endpoint.eintyg.registermedicalcertificate.test}"
			exchange-pattern="request-response" 
			responseTimeout="${SERVICE_TIMEOUT_MS}"
			transformer-refs="logReqOut" 
			responseTransformer-refs="logRespIn">
			<cxf:jaxws-client port="TaEmotLakarintygResponderPort"
				operation="TaEmotLakarintyg"
				clientClass="se.fk.vardgivare.sjukvard.taemotlakarintyg.v1.rivtabp20.TaEmotLakarintygResponderService"
				wsdlLocation="classpath:/schemas/fk/TaEmotLakarintygInteraction_1.0_rivtabp20.wsdl" />
		</https:outbound-endpoint>
		
		 <response>
            <custom-transformer doc:name="transform-response" class="se.skl.skltpservices.adapter.fk.regmedcert.Fk2VardTransformer"/>
        </response>

	</flow>
	
	<flow name="varden-fk-registermedicalcertificate-service-validate">

		<https:inbound-endpoint address="${inbound.endpoint.eintyg.registermedicalcertificate.validate}"
			connector-ref="soitoolkit-https-connector" 
			exchange-pattern="request-response"
			responseTransformer-refs="logRespOut"
			transformer-refs="logReqIn changeNamespaceRegisterCertificate">
		</https:inbound-endpoint>

		<cxf:proxy-service
			namespace="urn:riv:insuranceprocess:healthreporting:RegisterMedicalCertificate:3:rivtabp20"
			payload="body" 
			service="RegisterMedicalCertificateResponderService"
			wsdlLocation="classpath:/schemas/vard/interactions/RegisterMedicalCertificateInteraction/RegisterMedicalCertificateInteraction_3.0_rivtabp20.wsdl" />
			
		<custom-transformer doc:name="transform-request" class="se.skl.skltpservices.adapter.fk.regmedcert.Vard2FkTransformer"/>
			
		<https:outbound-endpoint connector-ref="soitoolkit-https-connector"
			address="${outbound.endpoint.eintyg.registermedicalcertificate.validate}"
			exchange-pattern="request-response" 
			responseTimeout="${SERVICE_TIMEOUT_MS}"
			transformer-refs="logReqOut" 
			responseTransformer-refs="logRespIn">
			<cxf:jaxws-client port="TaEmotLakarintygResponderPort"
				operation="TaEmotLakarintyg"
				clientClass="se.fk.vardgivare.sjukvard.taemotlakarintyg.v1.rivtabp20.TaEmotLakarintygResponderService"
				wsdlLocation="classpath:/schemas/fk/TaEmotLakarintygInteraction_1.0_rivtabp20.wsdl" />
		</https:outbound-endpoint>
		
		 <response>
            <custom-transformer doc:name="transform-response" class="se.skl.skltpservices.adapter.fk.regmedcert.Fk2VardTransformer"/>
        </response>

	</flow>
</mule>